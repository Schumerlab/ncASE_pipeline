#perl! -w

if(@ARGV<8){
    print "perl run_samtools_rnaseq.pl id_list genome1 genome2 read_length mapper path_sam path_bcf path_bedtools gtf\n"; exit;
}#usage

my $infile1=shift(@ARGV); chomp $infile1; my $trimmed="$infile1"."_trim";
system("cut -f 1 $infile1 > $trimmed");
open IN, $trimmed or die "cannot open indiv id list\n";

my $genome1=shift(@ARGV); chomp $genome1;

my $genome2=shift(@ARGV); chomp $genome2;

my $read_length=shift(@ARGV); chomp $read_length;

my $mapper=shift(@ARGV); chomp $mapper;

my $path_sam=shift(@ARGV); chomp $path_sam;

my $path_bcf=shift(@ARGV); chomp $path_bcf;

my $path_bedtools=shift(@ARGV); chomp $path_bedtools;

my $gtf=shift(@ARGV); chomp $gtf;

my $aims_list="current_aims_file"; chomp $aims_list;
open AIMSLIST, $aims_list or die "cannot open AIMs list\n";

my $aims=<AIMSLIST>; chomp $aims;
print "using AIMs in file $aims\n";

my $ase_file="$infile1"."_ASE";
open ASE, ">$ase_file";
while (my $id = <IN>){

    chomp $id;

    if($mapper eq 'bwa'){
	my $sam1="$id".".par1.sam";
	my $sam2="$id".".par2.sam";

	my $bam1="$id".".par1.bam";
        my $bam2="$id".".par2.bam";

	system("$path_sam sort $sam1 -o $bam1");
	system("$path_sam sort $sam2 -o $bam2");

	my $vcf1="$bam1".".vcf";
	my $vcf2="$bam2".".vcf";

	system("$path_sam mpileup -g --ignore-RG -f $genome1 $bam1 | $path_bcf call -m -o $vcf1");
	system("$path_sam mpileup -g --ignore-RG -f $genome2 $bam2 | $path_bcf call -m -o $vcf2");

	my @names=split(/\//,$id);
	my $indiv=$names[-1];

	my $overlap1="$indiv"."_par1";
        my $overlap2="$indiv"."_par2";

	#merge_files_using_two_columns_sharing_values.pl
	system("perl merge_files_using_two_columns_sharing_values.pl $aims 0 1 $vcf1 0 1 $overlap1");
	system("perl merge_files_using_two_columns_sharing_values.pl $aims 0 1 $vcf2 0 1 $overlap2");

	#ADD PRINT FILENAMES FOR ncASE_normalize_counts.pl!!!!

	system("perl samtools_vcf_to_ASE_counts_v3.pl $overlap1");
	system("perl samtools_vcf_to_ASE_counts_v3.pl $overlap2");

	my $ase1="$overlap1"."_ASE_counts";
	my $ase2="$overlap2"."_ASE_counts";
	
        my $combined="$indiv"."_combined_ASE";
	system("perl merge_files_using_two_columns_sharing_values.pl $ase1 0 1 $ase2 0 1 $combined");

	system("cut -f 1-6 $combined > $ase1");
        system("cut -f 7-12 $combined > $ase2");

	print ASE "$ase1\t$ase2\n";

	system("rm $sam1 $sam2 $bam1 $bam2 $vcf1 $vcf2 $trimmed");

    }#files were generated by bwa
    if($mapper eq 'star'){

	my $sam1=""; my $sam2=""; my $bam1=""; my $bam2=""; my $overlap1=""; my $overlap2="";
	
	if(length($gtf) > 0){

	$bam1="$id"."_par1Aligned.sortedByCoord.out.bam";
	$bam2="$id"."_par2Aligned.sortedByCoord.out.bam";

	} else{
	$sam1="$id"."_par1Aligned.toTranscriptome.out.bam";
	$sam2="$id"."_par2Aligned.toTranscriptome.out.bam";

	$bam1="$id"."_par1Aligned.toTranscriptome.out.sorted.bam";
        $bam2="$id"."_par2Aligned.toTranscriptome.out.sorted.bam";

	system("$path_sam sort $sam1 -o $bam1");
        system("$path_sam sort $sam2 -o $bam2");

	}#check if gtf file provided, name bams appropriately

	my $vcf1="$bam1".".vcf";
        my $vcf2="$bam2".".vcf";
        system("$path_sam mpileup -g --ignore-RG -f $genome1 $bam1 | $path_bcf call -m -o $vcf1");
        system("$path_sam mpileup -g --ignore-RG -f $genome2 $bam2 | $path_bcf call -m -o $vcf2");

	my @names=split(/\//,$id);
        my $indiv=$names[-1];

	if(length($gtf)>0){
	my $gtf1="$vcf1"."_gtf_overlap";
	my $gtf2="$vcf2"."_gtf_overlap";

	system("$path_bedtools -a $vcf1 -b $gtf -wo > $gtf1");
	system("$path_bedtools -a $vcf2 -b $gtf -wo > $gtf2");

	#overwrite original and proceed as before
	system("perl ASE_to_transcripts.pl $gtf1 transcript > $vcf1");
	system("perl ASE_to_transcripts.pl $gtf2 transcript > $vcf2");

	$overlap1="$indiv"."_par1";
        $overlap2="$indiv"."_par2";

	system("perl merge_files_using_two_columns_sharing_values.pl $aims 0 1 $vcf1 10 1 $overlap1");
        system("perl merge_files_using_two_columns_sharing_values.pl $aims 0 1 $vcf2 10 1 $overlap2");

	system("perl samtools_vcf_to_ASE_counts_v3.pl $overlap1 $gtf");
        system("perl samtools_vcf_to_ASE_counts_v3.pl $overlap2 $gtf");

	}#gtf provided, subset sites to transcripts
	else{
	$overlap1="$indiv"."_par1";
        $overlap2="$indiv"."_par2";

	#merge_files_using_two_columns_sharing_values.pl                                                                
        system("perl merge_files_using_two_columns_sharing_values.pl $aims 0 1 $vcf1 0 1 $overlap1");
        system("perl merge_files_using_two_columns_sharing_values.pl $aims 0 1 $vcf2 0 1 $overlap2");
  
	system("perl samtools_vcf_to_ASE_counts_v3.pl $overlap1");
	system("perl samtools_vcf_to_ASE_counts_v3.pl $overlap2");
	}#gtf not provided
	my $ase1="$overlap1"."_ASE_counts";
	my $ase2="$overlap2"."_ASE_counts";

	my $combined="$indiv"."_combined_ASE";
	system("perl merge_files_using_two_columns_sharing_values.pl $ase1 0 1 $ase2 0 1 $combined");

	system("cut -f 1-6 $combined > $ase1");
	system("cut -f 7-12 $combined > $ase2");

	print ASE "$ase1\t$ase2\n";

	system("rm $sam1 $sam2 $bam1 $bam2 $vcf1 $vcf2 $trimmed $gtf1 $gtf2");

    }#files were generated by STAR

}#for all individual sam files
